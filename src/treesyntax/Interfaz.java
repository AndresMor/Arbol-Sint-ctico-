/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package treesyntax;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Visitante
 */
public class Interfaz extends javax.swing.JFrame {

    /**
     * Creates new form Interfaz
     */
    Lienzo lienzo;
    TranD trandVerificacion = null;
    Arbol arbolVerificacion = null;
    ArrayList<Nodo> Nodos = new ArrayList();

    public Interfaz() {
        initComponents();
        //lienzo = new Lienzo();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        materialShadow1 = new elevacion.MaterialShadow();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        Text = new jcmouse.materialdesign.TextInput();
        TextCheck = new jcmouse.materialdesign.TextInput();
        Btn_Create = new rojerusan.RSMaterialButton();
        Btn_Check = new rojerusan.RSMaterialButton();
        alfabeto = new javax.swing.JLabel();
        verificado = new javax.swing.JLabel();
        Canvas = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        JTranD = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        JNodos = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jPanel2.setBackground(new java.awt.Color(130, 177, 255));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("SansSerif", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Regex to DFA");
        jPanel2.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(23, 12, 197, -1));

        jPanel3.setBackground(new java.awt.Color(69, 90, 100));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Text.setForeground(new java.awt.Color(255, 255, 255));
        Text.setColorPrimary(new java.awt.Color(255, 255, 255));
        Text.setHint("Crear");
        jPanel3.add(Text, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 33, -1, -1));

        TextCheck.setForeground(new java.awt.Color(255, 255, 255));
        TextCheck.setColorPrimary(new java.awt.Color(255, 255, 255));
        TextCheck.setHint("Verificar");
        jPanel3.add(TextCheck, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 160, -1, -1));

        Btn_Create.setBackground(new java.awt.Color(250, 250, 250));
        Btn_Create.setText("Crear");
        Btn_Create.setFont(new java.awt.Font("Roboto Bold", 1, 12)); // NOI18N
        Btn_Create.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Btn_CreateActionPerformed(evt);
            }
        });
        jPanel3.add(Btn_Create, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 93, 168, 43));

        Btn_Check.setBackground(new java.awt.Color(250, 250, 250));
        Btn_Check.setText("Verificar");
        Btn_Check.setFont(new java.awt.Font("Roboto Bold", 1, 12)); // NOI18N
        Btn_Check.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Btn_CheckActionPerformed(evt);
            }
        });
        jPanel3.add(Btn_Check, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 220, 168, -1));

        alfabeto.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        alfabeto.setForeground(new java.awt.Color(255, 255, 255));
        jPanel3.add(alfabeto, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 298, -1, -1));

        verificado.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        verificado.setForeground(new java.awt.Color(255, 255, 255));
        jPanel3.add(verificado, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 325, -1, -1));

        Canvas.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout CanvasLayout = new javax.swing.GroupLayout(Canvas);
        Canvas.setLayout(CanvasLayout);
        CanvasLayout.setHorizontalGroup(
            CanvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        CanvasLayout.setVerticalGroup(
            CanvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 333, Short.MAX_VALUE)
        );

        jScrollPane1.setBackground(new java.awt.Color(255, 255, 255));

        JTranD.setAutoCreateRowSorter(true);
        JTranD.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        JTranD.setGridColor(new java.awt.Color(255, 255, 255));
        JTranD.setIntercellSpacing(new java.awt.Dimension(5, 5));
        JTranD.setSelectionBackground(new java.awt.Color(130, 177, 255));
        JTranD.setShowHorizontalLines(false);
        JTranD.setShowVerticalLines(false);
        JTranD.getTableHeader().setResizingAllowed(false);
        JTranD.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(JTranD);

        jScrollPane2.setBackground(new java.awt.Color(255, 255, 255));

        JNodos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nodo", "PPOS", "UPOS", "SPOS"
            }
        ));
        JNodos.setGridColor(new java.awt.Color(255, 255, 255));
        JNodos.setIntercellSpacing(new java.awt.Dimension(5, 5));
        JNodos.setSelectionBackground(new java.awt.Color(130, 177, 255));
        JNodos.setShowHorizontalLines(false);
        JNodos.setShowVerticalLines(false);
        JNodos.getTableHeader().setResizingAllowed(false);
        JNodos.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(JNodos);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, 188, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Canvas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 446, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 457, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(Canvas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 260, Short.MAX_VALUE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Btn_CheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Btn_CheckActionPerformed
        // (a|b(c|d)*)+ac
        // (ab|cd)*d*c?
        if (TextCheck.getText().contains(" ") || TextCheck.getText().equals("")) {
            verificado.setText("No verificado");
        } else {
            String expresion = TextCheck.getText().replace("&", "");
            boolean comprobado = verificarCadena(expresion);
            if (comprobado) {
                verificado.setText("Verificado");
            } else {
                verificado.setText("No verificado");
            }
        }
    }//GEN-LAST:event_Btn_CheckActionPerformed

    private void Btn_CreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Btn_CreateActionPerformed
        // TODO add your handling code here:
        // (a|b(c|d)*)+ac
        super.paint(Canvas.getGraphics());
        Arbol tree = new Arbol();
        String RegularEx = RegEx.infixToPostfix("(" + Text.getText() + ")#");
        System.out.println(RegularEx);
        char[] datos = RegularEx.toCharArray();
        Nodo raiz = tree.MakeTree(datos);
        tree.setRaiz(raiz);
        // Obtiene hojas
        tree.hacerEstructuraSiguiente(tree.getContHojas());
        tree.preorden(raiz);
        arbolVerificacion = new Arbol();
        arbolVerificacion = tree;
        alfabeto.setText("Alfabeto: " + tree.getAlfabeto());
        // Imprime alfabeto y siguientepos
        System.out.println(Arrays.toString(tree.getSiguientePos()));
        System.out.println((tree.getAlfabeto()));
        Lienzo objLienzo = new Lienzo();
        objLienzo.setObjArbol(tree);
        objLienzo.paint(Canvas.getGraphics());
        Canvas.add(objLienzo);
        // Obtiene posicion final para verificar que estados son de finalización,
        // esta en clase Arbol
        System.out.println("PosFin: " + tree.getPosicionFin());
        // Obtiene estadosD y tranD, usar tranD.getEstadosD().forEach((k,v)->{}); y lo mismo para
        // tranD.getTranD() para iterar los estadosD y tranD
        TranD tranD = new TranD();
        tranD.hacerTranD(tree);
        trandVerificacion = new TranD();
        trandVerificacion = tranD;
        System.out.println("Estados");
        tranD.getEstadosD().forEach((k, v) -> System.out.println("Key: " + k + ": Value: " + v));
        System.out.println("TranD");
        tranD.getTranD().forEach((k, v) -> System.out.println("Key: " + k + ": Value: " + v));
        DefaultTableModel TranDModel = new DefaultTableModel();
        TranDModel.addColumn("          ");
        TranDModel.setRowCount(tranD.getTranD().size());
        tree.getAlfabeto().forEach((s) -> TranDModel.addColumn(s));
        TranDModel.addColumn("Posiciones");
        HashMap<Integer, HashMap<String, String>> map = tranD.getTranD();
        int i = 0;
        for (Map.Entry<Integer, HashMap<String, String>> entry : map.entrySet()) {
            HashMap<String, String> map2 = entry.getValue();
            TranDModel.setValueAt(getCharForNumber(entry.getKey()), i, 0);
            for (Map.Entry<String, String> entry2 : map2.entrySet()) {
                TranDModel.setValueAt(getCharForNumber(Integer.parseInt(entry2.getValue())), entry.getKey() - 1, getPosForLetters(entry2.getKey(), tree.getAlfabeto().toArray()));
            }
            i++;
        }
        HashMap<String, Integer> mapp = tranD.getEstadosD();
        for (Map.Entry<String, Integer> entry : mapp.entrySet()) {
            //System.out.println(entry.getKey()+" = "+entry.getValue());
            if (entry.getKey().contains("" + tree.getPosicionFin())) {
                TranDModel.setValueAt(getCharForNumber(entry.getValue()) + "*", entry.getValue() - 1, 0);
            }
            TranDModel.setValueAt(entry.getKey(), entry.getValue() - 1, tree.getAlfabeto().size() + 1);
        }
        JTranD.setModel(TranDModel);
        Nodos.removeAll(Nodos);
        inOrder(raiz);
        DefaultTableModel NodeModel = new DefaultTableModel();
        String Header[] = {"Nodo", "PPOS", "UPOS", "SPOS"};
        NodeModel.setColumnIdentifiers(Header);
        Set<Integer>[] sgpos = tree.getSiguientePos();
        int j = 0;
        for (Nodo n : Nodos) {
            if (tree.isOperator(n.valor)) {
                NodeModel.addRow(new Object[]{n.valor, n.getPrimeraPos(), n.getUltimaPos(), " "});
            } else if (n.valor == '&') {
                NodeModel.addRow(new Object[]{n.valor, " ", " ", " "});
            } else {
                NodeModel.addRow(new Object[]{n.valor, n.getPrimeraPos(), n.getUltimaPos(), sgpos[j]});
                j++;
            }
        }
        JNodos.setModel(NodeModel);
    }//GEN-LAST:event_Btn_CreateActionPerformed

    private boolean verificarCadena(String expresion) {
        if (arbolVerificacion == null && trandVerificacion == null) {
//            verificado.setText("No puedes verificar algo que no pusiste :)");
            return false;
        } else {
            Integer posFinal = arbolVerificacion.getPosicionFin();
            HashMap<String, Integer> estadosD = trandVerificacion.getEstadosD();
            HashMap<Integer, HashMap<String, String>> tranD = trandVerificacion.getTranD();
            String estados = "1";
            boolean bandera = true;
            if (expresion.length() > 0) {
                estados = tranD.get(1).get(expresion.substring(0, 1));
                int i = 2;
                while (i <= expresion.length()) {
                    String letra = expresion.substring(i - 1, i);
                    try {
                        if (tranD.get(Integer.parseInt(estados)).get(letra) != null) {
                            estados = tranD.get(Integer.parseInt(estados)).get(letra);
                        } else {
                            bandera = false;
                            break;
                        }
                    } catch (NumberFormatException | NullPointerException nfe) {
                        return false;
                    }
                    i++;
                }
            }
            HashMap<Integer, String> estadoDInvertido = invertirHash(estadosD);
            String conjuntoEstado = estadoDInvertido.get(Integer.parseInt(estados));
            return conjuntoEstado.contains(Integer.toString(posFinal)) && bandera;
        }

    }

    private HashMap<Integer, String> invertirHash(HashMap<String, Integer> hash) {
        HashMap<Integer, String> hashInvertido = new HashMap<>();
        hash.forEach((k, v) -> {
            hashInvertido.put(v, k);
        });
        return hashInvertido;
    }

    public static String getCharForNumber(int i) {
        return i > 0 && i < 27 ? String.valueOf((char) (i + 64)) : null;
    }

    public static int getPosForLetters(String letter, Object[] alphabet) {
        for (int i = 0; i < alphabet.length; i++) {
            if (letter.equals(alphabet[i])) {
                return i + 1;
            }
        }
        return 0;
    }

    private void inOrder(Nodo node) {
        if (node != null) {
            inOrder(node.hijo_izq);
            //System.out.println(node.valor);
            Nodos.add(node);
            inOrder(node.hijo_der);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Interfaz().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private rojerusan.RSMaterialButton Btn_Check;
    private rojerusan.RSMaterialButton Btn_Create;
    private javax.swing.JPanel Canvas;
    private javax.swing.JTable JNodos;
    private javax.swing.JTable JTranD;
    private jcmouse.materialdesign.TextInput Text;
    private jcmouse.materialdesign.TextInput TextCheck;
    private javax.swing.JLabel alfabeto;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private elevacion.MaterialShadow materialShadow1;
    private javax.swing.JLabel verificado;
    // End of variables declaration//GEN-END:variables
}
